!function(a){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var b;"undefined"!=typeof window?b=window:"undefined"!=typeof global?b=global:"undefined"!=typeof self&&(b=self),b.test=a()}}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b){b.exports={title:"URL's and CSS Basics",questions:[{id:"root_relative_path",prompt:'In class we learned about different types of relative URL\'s. One of them was "root relative", and it specifies a path relative to the webroot of the website.  Create an image tag that\'s source is an image "dog.png", which is in a folder under the webroot called "imgs". NOTE: In these exercises, self closing tags must end with <span class="variable">/&gt;</span>. This is not required in HTML5 documents, but is needed here.',type:"html",test:function(a,b,c){a.describe("The image tag",function(){a.it("should be the only element.",function(){a.expect(c.length).toBe(1)}),a.it("should be an image tag.",function(){a.expect(c[0].tagName).toBe("IMG")}),a.it('should have a root relative source to "dog.png".',function(){a.expect(c[0].getAttribute("src")).toBe("/imgs/dog.png")})})}},{id:"subdir_relative_path",prompt:'We also learned about paths that are relative to the current folder. Lets say under the current folder there is a folder called "imgs", and in it an image called "logo.png". Create an image tag that\'s source	points to that image using a path relative to the current folder.',type:"html",test:function(a,b,c){a.describe("The image tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be an image tag.",function(){a.expect(c[0].tagName).toBe("IMG")}),a.it('should have a source to "dog.png" that is relative to the current folder.',function(){a.expect(c[0].getAttribute("src")).toBe("imgs/logo.png")})})}},{id:"updir_relative_path",prompt:'Sometimes we want to reference a file that is in a folder outside of the current folder. To do this we use "../" to move back a folder. Lets say that two folders back from the current folder there is a folder called "about", and in it there is an html file called "my_company.html".  Create an anchor tag that links from the current folder to that file. Because anchor tags should contain some content, make the link read "About My Company".',type:"html",test:function(a,b,c){a.describe("The anchor tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be an anchor tag",function(){a.expect(c[0].tagName).toBe("A")}),a.it('should link to my_company.html which is two folders back under the folder "about".',function(){a.expect(c[0].getAttribute("href")).toBe("../../about/my_company.html")}),a.it('should contain the text "About My Company".',function(){a.expect(c[0].text.trim()).toBe("About My Company")})})}},{id:"img_link",prompt:'With anchor tags it is possible to turn anything into a link, even an image. Lets combine some of your previous answers, and create an anchor tag that links to a file "my_company.html", which is in a folder called "about" that is two folders back from the current folder. Inside that anchor tag, create an image which links to "logo.png", which is in a folder "imgs" under the current folder. The image should also have an alt attribute, with the text "About My Company".',type:"html",test:function(a,b,c){a.describe("The anchor tag",function(){a.it("should be the only root element",function(){a.expect(c.length).toBe(1)}),a.it("should be an anchor tag",function(){a.expect(c[0].tagName).toBe("A")}),a.it('should link to my_company.html which is two folders back under the folder "about".',function(){a.expect(c[0].getAttribute("href")).toBe("../../about/my_company.html")}),a.it("should contain only one element.",function(){a.expect(c[0].querySelectorAll("*").length).toBe(1)}),a.it("should contain an image tag.",function(){a.expect(c[0].querySelectorAll("img").length).toBe(1)})}),a.describe("The image tag",function(){a.it('should have a source that points to the file "logo.png", which is in a folder "imgs" under the current folder.',function(){a.expect(c[0].querySelector("img").getAttribute("src")).toBe("imgs/logo.png")}),a.it('should have a an alt attribute that reads "About My Company".',function(){a.expect(c[0].querySelector("img").getAttribute("alt")).toBe("About My Company")})})}},{id:"paragraph_selector_1",prompt:'On to CSS! In class we learned how to create a rule that selects all paragraphs in the webpage, and sets the color of the text in those paragraphs to black. Recreate that rule here, only instead of using the word "black", use the hex code for black.',type:"css",test:function(a,b,c){a.describe("The rule",function(){a.it("should be the only rule",function(){a.expect(c.stylesheet.rules.length).toBe(1)}),a.it("should only have one selector",function(){a.expect(c.stylesheet.rules[0].selectors.length).toBe(1)}),a.it("should select all paragraph tags",function(){a.expect(c.stylesheet.rules[0].selectors[0]).toBe("p")}),a.it("should contain only one declaration",function(){a.expect(c.stylesheet.rules[0].declarations.length).toBe(1)}),a.it("should contain a declartion which sets the text color of the paragraphs",function(){a.expect(c.stylesheet.rules[0].declarations[0].property).toBe("color")}),a.it("should contain a declartion which sets the text color of the paragraphs to black using a hex code.",function(){a.expect(c.stylesheet.rules[0].declarations[0].value).toMatch(/#[0]{3}$|#[0]{6}$/)})})}},{id:"paragraph_selector_2",prompt:"Create a rule that selects all paragraphs in the webpage, and sets the color of the text in those paragraphs to black, only this time use the abbreviated hex code (abbreviated hex codes have three digits instead of six).",type:"css",test:function(a,b,c){a.describe("The rule",function(){a.it("should be the only rule",function(){a.expect(c.stylesheet.rules.length).toBe(1)}),a.it("should only have one selector",function(){a.expect(c.stylesheet.rules[0].selectors.length).toBe(1)}),a.it("should select all paragraph tags",function(){a.expect(c.stylesheet.rules[0].selectors[0]).toBe("p")}),a.it("should contain only one declaration",function(){a.expect(c.stylesheet.rules[0].declarations.length).toBe(1)}),a.it("should contain a declartion which sets the text color of the paragraphs",function(){a.expect(c.stylesheet.rules[0].declarations[0].property).toBe("color")}),a.it("should contain a declartion which sets the text color of the paragraphs to black using an abbreviated hex code.",function(){a.expect(c.stylesheet.rules[0].declarations[0].value).toMatch(/#[0]{3}$/)})})}},{id:"paragraph_selector_3",prompt:"Create a rule that selects all paragraphs in the webpage, and sets the color of the text in those paragraphs to black, only this time use the rgb syntax.",type:"css",test:function(a,b,c){a.describe("The rule",function(){a.it("should be the only rule",function(){a.expect(c.stylesheet.rules.length).toBe(1)}),a.it("should only have one selector",function(){a.expect(c.stylesheet.rules[0].selectors.length).toBe(1)}),a.it("should select all paragraph tags",function(){a.expect(c.stylesheet.rules[0].selectors[0]).toBe("p")}),a.it("should contain only one declaration",function(){a.expect(c.stylesheet.rules[0].declarations.length).toBe(1)}),a.it("should contain a declaration which sets the text color of the paragraphs",function(){a.expect(c.stylesheet.rules[0].declarations[0].property).toBe("color")}),a.it("should contain a declaration which sets the text color of the paragraphs to black using the rgb syntax.",function(){a.expect(c.stylesheet.rules[0].declarations[0].value).toMatch(/rgb\(\s?0,\s?0,\s?0\s?\)/)})})}},{id:"div_border",prompt:"CSS allows us to define a number of different style properties to elements. Another property we learned in class is one that adds a border to an element. Create a rule that selects all div tags in the webpage, and gives them a border that is 1 pixel wide, solid, and has an exactly medium grey color. You can do this using rgb or hex codes. Remember that rgb values go from 0 to 255 (for a total of 256 values), and hex digits go from 0 to F (for a total of 16 values).",type:"css",test:function(a,b,c){a.describe("The rule",function(){a.it("should be the only rule",function(){a.expect(c.stylesheet.rules.length).toBe(1)}),a.it("should only have one selector",function(){a.expect(c.stylesheet.rules[0].selectors.length).toBe(1)}),a.it("should select all div tags",function(){a.expect(c.stylesheet.rules[0].selectors[0]).toBe("div")}),a.it("should contain only one declaration",function(){a.expect(c.stylesheet.rules[0].declarations.length).toBe(1)}),a.it("should contain a declaration which sets the border for all divs",function(){a.expect(c.stylesheet.rules[0].declarations[0].property).toBe("border")}),a.it('should contain a declaration which sets the border of all divs to the above values. Hint: the abbrevation for pixels is "px", and the medium value for hex and rgb is 7 and 127 respectively (remember you\'re starting from 0, not 1).',function(){a.expect(c.stylesheet.rules[0].declarations[0].value).toMatch(/1px solid (rgb\(\s?127,\s?127,\s?127\s?\)|#[7]{3}$|#[7]{6}$)/)})})}},{id:"div_multiple",prompt:"Now lets create a rule that has two declarations. Select all div tags in the page, and set their text color to green, and give them a 1 pixel solid border of red. You can use the rgb or hex syntax, and to make things easy on me put the color declaration first.",type:"css",test:function(a,b,c){a.describe("The rule",function(){a.it("should be the only rule",function(){a.expect(c.stylesheet.rules.length).toBe(1)}),a.it("should only have one selector",function(){a.expect(c.stylesheet.rules[0].selectors.length).toBe(1)}),a.it("should select all div tags",function(){a.expect(c.stylesheet.rules[0].selectors[0]).toBe("div")}),a.it("should contain only two declarations",function(){a.expect(c.stylesheet.rules[0].declarations.length).toBe(2)}),a.it("should contain a delaration which sets the text color first",function(){a.expect(c.stylesheet.rules[0].declarations[0].property).toBe("color")}),a.it("should contain a declaration which sets the border last",function(){a.expect(c.stylesheet.rules[0].declarations[1].property).toBe("border")}),a.it("should contain a declaration which sets the text color of all divs to green",function(){a.expect(c.stylesheet.rules[0].declarations[0].value).toMatch(/rgb\(\s?0,\s?255,\s?0\s?\)|#0[fF]0$|#00[fF]{2}00$/)}),a.it("should contain a declaration which sets the border of all divs to the above values.",function(){a.expect(c.stylesheet.rules[0].declarations[1].value).toMatch(/1px solid (rgb\(\s?255,\s?0,\s?0\s?\)|#[fF]00$|#[fF]{2}0000$)/)})})}},{id:"multiple_rules",prompt:"When we are creating styles for a page, we almost never have a single rule. Create two rules, one which selects all paragraph tags and sets their text color to black, and one which selects all anchor tags on the page and sets their color to blue. Put the rule for paragraphs first. You can use hex or rgb ccodes.",type:"css",test:function(a,b,c){a.describe("The CSS",function(){a.it("should have two rules",function(){a.expect(c.stylesheet.rules.length).toBe(2)}),a.it("each rule should only have one selector",function(){a.expect(c.stylesheet.rules[0].selectors.length).toBe(1),a.expect(c.stylesheet.rules[1].selectors.length).toBe(1)}),a.it("should have the rule that selects all paragraphs first",function(){a.expect(c.stylesheet.rules[0].selectors[0]).toBe("p")}),a.it("should have the rule that selects all anchor tags second",function(){a.expect(c.stylesheet.rules[1].selectors[0]).toBe("a")})}),a.describe("The paragraph rule",function(){a.it("should contain only one declaration",function(){a.expect(c.stylesheet.rules[0].declarations.length).toBe(1)}),a.it("should contain a delaration which sets the text color",function(){a.expect(c.stylesheet.rules[0].declarations[0].property).toBe("color")}),a.it("should contain a declaration which sets the text color to black",function(){a.expect(c.stylesheet.rules[0].declarations[0].value).toMatch(/rgb\(\s?0,\s?0,\s?0\s?\)|#[0]{3}$|#[0]{6}$/)})}),a.describe("The anchor tag rule",function(){a.it("should contain only one declaration",function(){a.expect(c.stylesheet.rules[1].declarations.length).toBe(1)}),a.it("should contain a delaration which sets the text color",function(){a.expect(c.stylesheet.rules[1].declarations[0].property).toBe("color")}),a.it("should contain a declaration which sets the text color to blue",function(){a.expect(c.stylesheet.rules[1].declarations[0].value).toMatch(/rgb\(\s?0,\s?0,\s?255\s?\)|#00[fF]$|#0000[fF]{2}$/)})})}}]}},{}]},{},[1])(1)});