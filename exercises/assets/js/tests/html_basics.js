!function(a){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var b;"undefined"!=typeof window?b=window:"undefined"!=typeof global?b=global:"undefined"!=typeof self&&(b=self),b.test=a()}}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b){b.exports={title:"HTML Basics",questions:[{id:"largest_heading",prompt:'Heading tags can be used to indicate the title of the webpage, or a title of a subsection. Using the largest heading, create a tag with that contains the text <span class="string">This is the page title</span>.',type:"html",test:function(a,b,c){a.describe("The tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be the largest heading tag",function(){a.expect(c[0].tagName).toBe("H1")}),a.it("should contain the text: This is the page title",function(){a.expect(c[0].textContent.trim()).toBe("This is the page title")})})}},{id:"second_largest_heading",prompt:'For sections of a page we use the smaller heading tags. Using the second largest heading, create a tag that contains the text <span class="string">This is a section title</span>.',type:"html",test:function(a,b,c){a.describe("The tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be the second largest heading tag",function(){a.expect(c[0].tagName).toBe("H2")}),a.it("should contain the text: This is the page title",function(){a.expect(c[0].textContent.trim()).toBe("This is a section title")})})}},{id:"paragraph",prompt:'Paragraph tags can be used to create blocks of text in a webpage. Create a paragraph tag that contains the text <span class="string">This is a block of text</span>.',type:"html",test:function(a,b,c){a.describe("The tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be a paragraph tag",function(){a.expect(c[0].tagName).toBe("P")}),a.it("should contain the text: This is a block of text",function(){a.expect(c[0].textContent.trim()).toBe("This is a block of text")})})}},{id:"anchor",prompt:'Linking web pages together is essential to how the web works. To create visual links between webpages, we use anchor tags.  Create an anchor tag that links to <span class="string">https://generalassemb.ly</span>, and contains the text <span class="string">General Assembly</span>. Remember, we define where we want anchor tags to link to using attributes.',type:"html",test:function(a,b,c){a.describe("The tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be an anchor tag",function(){a.expect(c[0].tagName).toBe("A")}),a.it("should contain the text: General Assembly",function(){a.expect(c[0].textContent.trim()).toBe("General Assembly")}),a.it("should link to: https://generalassemb.ly",function(){a.expect(c[0].getAttribute("href")).toBe("https://generalassemb.ly")})})}},{id:"code_1",prompt:'When we want to display code in a webpage, we use code tags. Code tags apply formatting to the text they contain so that it looks similar to what you might see in a code editor (only without the different colors). Create a code tag that contains the text <span class="string">This is some code</span>.',type:"html",test:function(a,b,c){a.describe("The tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be a code tag",function(){a.expect(c[0].tagName).toBe("CODE")}),a.it("should contain the text: This is some code",function(){a.expect(c[0].textContent.trim()).toBe("This is some code")})})}},{id:"code_2",prompt:'What if we want to display some html code inside a code tag? In HTML code, the <span class="variable">&lt;</span> and <span class="variable">&gt;</span> symbols are called "special characters" because when the browser sees them it thinks they are part of a tag. In order to display them in the webpage, we have to do what is called "escaping". This involves replacing the symbol with sequence of symbols, letters, and numbers that tell the browser what special character we want to display.  Look up the escape codes for the less than (<span class="variable">&lt;</span>) and greater than (<span class="variable">&gt;</span>) symbols, and use them to display the code for an empty paragraph inside a code tag.',type:"html",test:function(a,b,c){a.describe("The tag",function(){a.it("should be the only element",function(){a.expect(c.length).toBe(1)}),a.it("should be a code tag",function(){a.expect(c[0].tagName).toBe("CODE")}),a.it("should contain only text",function(){a.expect(c[0].querySelectorAll("*").length).toBe(0)}),a.it("should contain the text for an empty paragraph tag using the proper escape codes",function(){a.expect(c[0].innerHTML.trim()).toMatch(/&lt;p&gt;\s*&lt;\/p&gt;/)})})}},{id:"unordered_list",prompt:"Tags can be written inside other tags to define structures in a webpage. An example of this is the unordered list tag, and the list item tags. Create an unordered list that contains a sample grocery list.",type:"html",test:function(a,b,c){a.describe("The unordered list",function(){a.it("should be the only root element",function(){a.expect(c.length).toBe(1)}),a.it("should be an unordered list tag",function(){a.expect(c[0].tagName).toBe("UL")}),a.it("should contain only list item tags",function(){Array.prototype.slice.apply(c[0].querySelectorAll("*")).forEach(function(b){a.expect(b.tagName).toBe("LI")})})}),a.describe("The list items",function(){a.it("should contain only text",function(){Array.prototype.slice.apply(c[0].querySelectorAll("*")).forEach(function(b){a.expect(b.querySelectorAll("*").length).toBe(0)})}),a.it("should contain some text",function(){Array.prototype.slice.apply(c[0].querySelectorAll("*")).forEach(function(b){a.expect(b.textContent.trim().length).toBeGreaterThan(0)})})})}},{id:"ordered_list",prompt:"Another example of a structure created by nesting tags is the ordered list tag, and the list item tags. Create an ordered list that contains your favorite instructors for FEWD6.",type:"html",test:function(a,b,c){a.describe("The ordered list",function(){a.it("should be the only root element",function(){a.expect(c.length).toBe(1)}),a.it("should be an ordered list tag",function(){a.expect(c[0].tagName).toBe("OL")}),a.it("should contain only list item tags",function(){Array.prototype.slice.apply(c[0].querySelectorAll("*")).forEach(function(b){a.expect(b.tagName).toBe("LI")})})}),a.describe("The list items",function(){a.it("should contain only text",function(){Array.prototype.slice.apply(c[0].querySelectorAll("*")).forEach(function(b){a.expect(b.querySelectorAll("*").length).toBe(0)})}),a.it("should contain the names of your current FEWD instructors",function(){Array.prototype.slice.apply(c[0].querySelectorAll("*")).forEach(function(b){a.expect(b.textContent.trim()).toMatch(/ryan( lynch)?|wade( hammes)?/i)})})})}},{id:"div",prompt:"One tag you will become very familiar with over this course is the div tag. The div tag is essentially a box, but by styling it and combining it with other tags we can create an infinite number of visual and structural components for our webpages. Look up the div tag, and create a div that contains a paragraph tag with some text.",type:"html",test:function(a,b,c){a.describe("The div",function(){a.it("should be the only root element",function(){a.expect(c.length).toBe(1)}),a.it("should be a div tag",function(){a.expect(c[0].tagName).toBe("DIV")}),a.it("should contain only one tag",function(){a.expect(c[0].querySelectorAll("*").length).toBe(1)}),a.it("should contain a paragraph tag",function(){a.expect(c[0].querySelector("p")).not.toBe(null)})}),a.describe("The paragraph",function(){a.it("should contain only text",function(){a.expect(c[0].querySelector("p").querySelectorAll("*").length).toBe(0)}),a.it("should contain some text",function(){a.expect(c[0].querySelector("p").textContent.trim().length).toBeGreaterThan(0)})})}},{id:"section",prompt:'The HTML5 specification defines new tags that have new behaviors and roles in webpages. One of these tags is the section tag. It, unsurprisingly, defines a section of a webpage. Look up the section tag; and use it along with the second largest heading and a paragraph to create a page section. Make the title of the section <span class="string">This is a section</span> and within the section create a block of text that says <span class="string">This is the section content</span>.',type:"html",test:function(a,b,c){a.describe("The section",function(){a.it("should be the only root element",function(){a.expect(c.length).toBe(1)}),a.it("should be a section tag",function(){a.expect(c[0].tagName).toBe("SECTION")}),a.it("should contain only two tags",function(){a.expect(c[0].querySelectorAll("*").length).toBe(2)}),a.it("should contain the second largest heading tag",function(){a.expect(c[0].querySelectorAll("*")[0].tagName).toBe("H2")}),a.it("should contain a paragraph tag",function(){a.expect(c[0].querySelectorAll("*")[1].tagName).toBe("P")})}),a.describe("The heading",function(){a.it("should contain only text",function(){a.expect(c[0].querySelector("h2").querySelectorAll("*").length).toBe(0)}),a.it("should contain the text: This is a section",function(){a.expect(c[0].querySelector("h2").textContent.trim()).toBe("This is a section")})}),a.describe("The paragraph",function(){a.it("should contain only text",function(){a.expect(c[0].querySelector("p").querySelectorAll("*").length).toBe(0)}),a.it("should contain the text: This is the section content",function(){a.expect(c[0].querySelector("p").textContent.trim()).toBe("This is the section content")})})}}]}},{}]},{},[1])(1)});